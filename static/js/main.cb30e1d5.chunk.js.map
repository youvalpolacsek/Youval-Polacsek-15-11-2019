{"version":3,"sources":["stores/WeatherStore.js","components/Favorite.js","components/favorites.js","components/Day.js","components/Current.js","components/City.js","App.js","serviceWorker.js","index.js"],"names":["observable","action","e","theCity","target","value","key","city","cityCurrentCondition","cityName","currentText","tempCelcius","tempImperial","console","log","cityCondArr","push","name","cityToDelete","find","c","newCityArr","index","indexOf","splice","a","axios","get","currentCondition","data","WeatherText","Favorite","inject","observer","removeCity","props","WeatherStore","removeCityFromFav","showCity","findCityCurrentCond","this","temp","unitSymbole","unit","theName","slice","toUpperCase","length","className","id","onClick","href","Component","Favorites","toggleUnit","setState","showMetric","state","theCities","MappedFavorites","map","ShowCity","Day","formatDate","moment","day","date","_d","toString","split","join","minTemperature","maxTemperature","dayWeather","dayIcon","Current","City","handleCityChange","autoComplete","cityNames","cityNamesList","findForecast","cityKey","theForecast","cityForecast","findCurrentCondition","theCityFixed","x","componentDidMount","saveCityToFav","cities","weatherIcon","list","onChange","placeholder","src","text","d","App","ShowFav","showFav","toggleDarkMode","darkMode","openWindow","viewMode","style","display","textAlign","alignSelf","color","backgroundColor","height","gridTemplateColumns","gridTemplateRows","Boolean","window","location","hostname","match","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb30e1d5.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\nimport axios from 'axios'\n\n\nclass WeatherStore {\n    @observable showFav = false\n    @observable cityCondArr = []\n    @observable theCity = \"\"\n    @observable currentText = \"\"\n    @observable tempCelcius = \"\"\n    @observable tempImperial = \"\"\n    \n    @action handleCityChange = (e) => this.theCity = e.target.value ;\n\n\n    @action saveCityToFav = (key, city) => {\n        let cityCurrentCondition = {\n            key: key,\n            cityName: city,\n            currentText: this.currentText,\n            tempCelcius: this.tempCelcius,\n            tempImperial: this.tempImperial\n        }\n        console.log(cityCurrentCondition)\n        this.cityCondArr.push(cityCurrentCondition)\n    }\n\n    @action removeCityFromFav = (name) => {\n        let cityToDelete = this.cityCondArr.find(c => c.cityName == name)\n        let newCityArr = [...this.cityCondArr]\n        let index = newCityArr.indexOf(cityToDelete)\n        newCityArr.splice(index, 1)\n        console.log(newCityArr)\n        this.cityCondArr =newCityArr\n    }\n\n\n    @action findCityCurrentCond = async (key) => {\n            let currentCondition = await axios.get(`http://localhost:5000/cityCurrent/${key}`)\n            this.currentText = currentCondition.data[0].WeatherText\n            this.tempCelcius = currentCondition.data[0].tempCelcius\n            this.tempImperial = currentCondition.data[0].tempImperial \n            console.log(currentCondition)\n        }\n\n}\n\nexport default new WeatherStore()","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport '../styles/favorite.css'\n\n\n@inject('WeatherStore')\n@observer\nclass Favorite extends Component{\n\nremoveCity = () => {\n    let name = this.props.name\n    console.log(name)\n    this.props.WeatherStore.removeCityFromFav(name)\n}\n\nshowCity = () => {\n    this.props.showCity()\n    let key = this.props.city.key\n    console.log(key)\n    this.props.WeatherStore.findCityCurrentCond(key)\n}\n\nrender(){\n    let name = this.props.name\n    let key = this.props.key\n    let temp = this.props.temp\n    let unit = this.props.unit\n    let unitSymbole = unit == \"Celsius\"? \"C\": \"F\"\n    let tempImperial = this.props.city.tempImperial\n    let currentText = this.props.city.currentText\n    let theCityFixed = name.slice(0,1).toUpperCase()\n            let x = name.slice(1, name.length)\n            let theName = theCityFixed+x\n\n    return(\n        <div className=\"favorite\">\n       <div id={this.props.name} className=\"favoriteName\">\n           <div>Hi from {theName}, it's {temp}  &#176; {unitSymbole} and {currentText} </div>\n       </div>\n       <div className=\"favoriteButtons\">\n           <a onClick={this.removeCity} href=\"#\" className=\"myButton2\">Remove from Favorites</a>\n           <a onClick={this.showCity} href=\"#\" className=\"myButton2\">See Forecast</a>\n       </div>\n        </div>\n    )\n}\n}\n\nexport default Favorite","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport Favorite from './Favorite';\nimport '../styles/favorites.css'\n\n@inject('WeatherStore')\n@observer\nclass Favorites extends Component{\n    constructor(){\n        super()\n        this.state={\n            showMetric : true\n        }\n      }\n\n      toggleUnit = () => {\n          this.setState({showMetric: !this.state.showMetric})\n      }\n      \n      render(){        \n        let theCities = this.props.WeatherStore.cityCondArr\n        let showMetric = this.state.showMetric\n        //   console.log(theCities)\n\n        let MappedFavorites =  theCities.length >= 1 ? theCities.map(c => <Favorite key={c.key} city={c} unit={showMetric? \"Celsius\": \"Fahrenheit\"}temp={showMetric? c.tempCelcius: c.tempImperial}showCity={this.props.ShowCity} name={c.cityName} />):\n        <div>You have no favorites yet</div>\n\n        return(\n            <div className=\"favoritesContainer\">\n                    <a onClick={this.toggleUnit} href=\"#\" className=\"myButton2\">toggle unit</a>\n                  {MappedFavorites}\n              </div>\n          )\n      }\n}\n\nexport default Favorites;","import React from 'react';\nimport '../styles/Day.css'\nimport moment from 'moment'\n\nconst Day = (props) => {\n    let city = props.city\n    let date = moment(props.day.date)\n    let x = date._d.toString().split(\" \")\n    let formatDate = x.splice(0,4).join(\" \")\n    let minTemperature = props.day.minTemperature\n    let maxTemperature = props.day.maxTemperature\n    let unit = props.day.unit = \"c\" ? \"Celsius\" : \"Fahrenheit\"\n    let WeatherText = props.day.dayWeather\n    let icon = props.day.dayIcon\n\nreturn(\n   <div className=\"day\">\n    <div id=\"date\">{formatDate}</div>\n    <div id=\"temp\">{minTemperature} -{maxTemperature} <span>&#176;</span></div>\n    <div id=\"weatherText\">{WeatherText}</div>\n   </div>\n)\n}\n\nexport default Day","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\n\n@inject('WeatherStore')\n@observer\nclass Current extends Component {\n\nrender(){\n    let currentText = this.props.WeatherStore.currentText\n    let tempCelcius = this.props.WeatherStore.tempCelcius\n    let tempImperial = this.props.WeatherStore.tempImperial\n    // let currentCondition = this.props.WeatherStore.currentCondition\n    // let currentText = currentCondition.map(c => c.Link)\n    // console.log(currentText)\n    return(\n        <div>it's {tempCelcius} <span>&#176;</span> outside and {currentText}</div>\n    )\n}\n\n}\n\n\nexport default Current","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport axios from 'axios'\nimport Day from './Day'\nimport Current from './Current'\nimport '../styles/city.css'\n\n@inject('WeatherStore')\n@observer\nclass City extends Component{\n    constructor(){\n        super()\n        this.state={\n            theCity: \"\",\n            cityName: \"\",\n            cityNamesList: [],\n            cityCurrentCondition: \"\",\n            cityForecast: \"\"\n        }\n      }\n\n      handleCityChange = (e) => {\n            this.setState({ theCity : e.target.value })\n            this.autoComplete()\n        };\n        \n        autoComplete = async () => {\n            let cityName = this.state.theCity\n            if (cityName.length >=2){\n                let cityNames = await axios.get(`http://localhost:5000/city/${cityName}`)\n                this.setState({cityNamesList: cityNames.data })\n                // console.log(cityNames[0].key)\n        }\n        }\n\n        findForecast = async () => {\n            let cityKey = this.state.cityNamesList[0].key\n            let theForecast = await axios.get(`http://localhost:5000/cityForecast/${cityKey}`)\n            // console.log(theForecast)\n            this.setState({cityForecast:theForecast})\n            // console.log(this.state.cityForecast.data)\n        }\n\n\n        findCurrentCondition = async () => {\n            let cityKey = this.state.cityNamesList[0].key\n            let currentCondition = await axios.get(`http://localhost:5000/cityCurrent/${cityKey}`)\n            console.log(cityKey) \n            this.setState({cityCurrentCondition:currentCondition}) \n            this.findForecast()\n            this.props.WeatherStore.findCityCurrentCond(cityKey)\n            let theCityFixed = this.state.theCity.slice(0,1).toUpperCase()\n            let x = this.state.theCity.slice(1, this.state.theCity.length)\n            let theName = theCityFixed+x\n            this.setState({cityName :theName})\n        }\n\n        componentDidMount = async () => {\n            let cityKey = \"215854\"\n            this.setState({theCity : \"Tel Aviv\"})\n            let theForecast = await axios.get(`http://localhost:5000/cityForecast/${cityKey}`)\n            this.setState({cityForecast:theForecast})\n            this.props.WeatherStore.findCityCurrentCond(cityKey)\n            this.setState({cityName : this.state.theCity})\n        }\n       \n        saveCityToFav = () => {\n            let cityKey = this.state.cityNamesList[0].key\n            this.props.WeatherStore.saveCityToFav(cityKey, this.state.theCity)\n        }\n\n\n        render(){\n            let cities = this.state.cityNamesList\n            let cityCurrentCondition = this.state.cityCurrentCondition \n            let cityForecast = this.state.cityForecast.data\n            let coldIcon = \"https://cdn3.iconfinder.com/data/icons/weather-16/256/Snowflake-512.png\"\n            let sunIcon = \"https://cdn4.iconfinder.com/data/icons/sun-11/50/44-512.png\"\n            let weatherIcon = this.props.WeatherStore.tempCelcius >=22 ? sunIcon : coldIcon\n\n          return(\n              <div>\n                  <div className=\"citySearchContainer\">\n                  <input name=\"cityName\" list = \"cityNames\"\n                  className=\"css-input\"\n                  value={this.state.theCity} \n                  onChange={this.handleCityChange}\n                  placeholder=\"Search City\"></input>\n                <datalist id=\"cityNames\">\n                {cities.length >=1 ? cities.map(c=>  <option  className=\"cityNames\" value={c.name}>{c.name}</option>): null} \n                </datalist>\n                  <a onClick={this.findCurrentCondition} href=\"#\" className=\"myButton\">Search City</a>\n                  <a  value={this.state.theCity} onClick={this.saveCityToFav} href=\"#\" className=\"myButton\">Save City</a>\n                  </div>\n                  <br></br>\n                  <div id=\"city\">\n                      <span id=\"cityName\">{this.state.cityName}</span>\n                      <img className=\"weatherIcon\" src={weatherIcon}></img>\n                  </div>\n                      <div>\n                          <h2>\n                      <Current temp={cityCurrentCondition.tempCelcius} text={cityCurrentCondition.WeatherText}/>\n                          </h2>\n                      </div>\n                  <div className=\"forceastContainer\">\n                   {cityForecast ? cityForecast.map(d => d = <Day key={d.date} day={d} city={this.state.theCity}/>) : null}\n                  </div>\n                  \n              </div>\n          )\n      }\n}\n\n\nexport default City;","import React, { Component } from 'react';\nimport './App.css';\nimport { observer, inject } from 'mobx-react';\nimport Favorites from './components/favorites';\nimport City from './components/City';\n\n\n@inject('WeatherStore')\n@observer\nclass App extends Component{\n  constructor(){\n    super()\n    this.state={\n      showFav: false,\n      darkMode: false\n    }\n  }\n  \n  ShowFav = () => this.setState({ showFav: true });\n\n  ShowCity = () => this.setState({ showFav: false });\n\n  toggleDarkMode = () => this.setState({darkMode: !this.state.darkMode})\n  \n\n  render(){\n    const openWindow = this.state.showFav ? \n    <Favorites ShowCity={this.ShowCity}/> : \n    <City />;\n\n    const style = {\n      display: 'grid',\n      textAlign: 'center',\n      alignSelf: 'auto',\n      color: 'white',\n      backgroundColor: '#282c34',\n      height: '100vh',\n      gridTemplateColumns: '100%',\n      gridTemplateRows: '5% 10% 5% 70%'\n  }\n\n    const viewMode = this.state.darkMode ? \n    <span onClick={this.toggleDarkMode}>Bright</span> :\n    <span onClick={this.toggleDarkMode}>Dark</span>\n\n    return(\n        <div className=\"appContainer\" style={this.state.darkMode ? style : null} >\n            <div className=\"navbar\">\n              <span onClick={this.ShowCity}>Search </span>\n              <span onClick={this.ShowFav} >My Cities</span>\n              {viewMode}\n            </div>\n         <h1 className=\"header\">Herolo Weather App</h1>\n         <span></span>\n          {openWindow}\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'mobx-react';\nimport WeatherStore from './stores/WeatherStore'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = {WeatherStore}\n\n\nReactDOM.render(<Provider {...store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}